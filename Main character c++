// Fill out your copyright notice in the Description page of Project Settings.


#include "BatteryMan.h"
#include "Components/SkeletalMeshComponent.h"
#include "GameFramework/Actor.h"
#include "EnhancedInputComponent.h"
#include "EnhancedInputSubsystems.h"
#include "Kismet/GameplayStatics.h"
#include "Animation/AnimInstance.h"
#include "Camera/CameraComponent.h"
#include "Components/CapsuleComponent.h"
#include "DrawDebugHelpers.h"
#include "UObject/ConstructorHelpers.h"
#include "Components/StaticMeshComponent.h"
#include "UObject/UObjectGlobals.h"

#include "Misc/OutputDeviceNull.h"





// Sets default values
ABatteryMan::ABatteryMan()
{
 	// Set this character to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
	PrimaryActorTick.bCanEverTick = true;

	// Changes size of the capsule (hitbox)
	GetCapsuleComponent()->InitCapsuleSize(42.0f, 96.0f);

	// Player does not rotate, only camera
	bUseControllerRotationPitch = false;
	bUseControllerRotationYaw = false;
	bUseControllerRotationRoll = false;


	// Allow the player to rotate
	GetCharacterMovement()->bOrientRotationToMovement = true;

	// Rate at which the player rotates
	GetCharacterMovement()->RotationRate = FRotator(0.0f, 540.0f, 0.0f);

	// Sets player jump velocity to 600
	GetCharacterMovement()->JumpZVelocity = 600.0f;

	// How much you can control the player mid air 
	GetCharacterMovement()->AirControl = 0.2f;

	// Setting the player on the players location
	CameraBoom = CreateDefaultSubobject<USpringArmComponent>(TEXT("CameraBoom"));
	CameraBoom->SetupAttachment(RootComponent);
	CameraBoom->TargetArmLength = 300.0f;
	// Rotates arm based on the controller
	CameraBoom->bUsePawnControlRotation = true;

	FollowCamera = CreateAbstractDefaultSubobject<UCameraComponent>(TEXT("FollowCamera"));
	// Sets the camera to follow the camera boom location
	FollowCamera->SetupAttachment(CameraBoom, USpringArmComponent::SocketName);
	// Camera does not rotate relative to the arm
	FollowCamera->bUsePawnControlRotation = false;


}


// Called when the game starts or when spawned
void ABatteryMan::BeginPlay()
{
	Super::BeginPlay();

	/** Sets starting ammo and starting boolean values */
	HasSpawned = false;
	Ammo = 15;
	AmmoReserve = 15;
	GunEquipped = 2;
	IsReloading = false;
	CameraZoomed = false;
	HitMarker = false;
	HitScreen = false;
	bDead = false;
	ShootKeyHeldDown = false;
	Power = 100.0f;

	// Bind capsule component to the function
	GetCapsuleComponent()->OnComponentBeginOverlap.AddDynamic(this, &ABatteryMan::OnBeginOverlap);
	
}

// Called every frame
void ABatteryMan::Tick(float DeltaTime)
{
	Super::Tick(DeltaTime);

	/** Checks if the player is dead */
	if (Power <= 0)
	{
		if (!bDead)
		{
			bDead = true;
			/** Makes the mesh ragdoll */
			GetMesh()->SetSimulatePhysics(true);
			FTimerHandle UnusedHandle;
			/** calls the function RestartGame after 3 seconds of the player being dead */
			GetWorldTimerManager().SetTimer(UnusedHandle, this, &ABatteryMan::RestartGame, 3.0f, false);


		}
	}

	/** Used to check if a recharge should be spawned (spawns every 10 points) */
	if (Score % 10 == 0 && HasSpawned == false)
	{
		CurrentScore = Score;
		FVector SpawnPosition = FVector(1765, 3347, 120);
		FRotator SpawnRotation = FRotator(0.0f, 0.0f, 0.0f);

		GetWorld()->SpawnActor(PlayerRecharge, &SpawnPosition, &SpawnRotation);
		HasSpawned = true;
	}

	if (Score % 10 == 0 && Score != CurrentScore)
	{
		HasSpawned = false;
	}

	/** Makes true if the player is holding down shoot with the auto fire rifle, with the Shoot function being called according to the timer passed in */
	if (ShootKeyHeldDown)
	{
		Shoot(0.1f);
	}

	if (HitMarker)
	{
		HitMarkerTimePassed += 1;

		if (HitMarkerTimePassed == 5)
		{
			HitMarker = false;
			HitMarkerTimePassed = 0;
		}
	}

	if (HitScreen)
	{
		HitScreenTimer += 1;
		
		if (HitScreenTimer == 20)
		{
			HitScreen = false;
			HitScreenTimer = 0;
		}
	}



}

// Called to bind functionality to input
void ABatteryMan::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)
{
	Super::SetupPlayerInputComponent(PlayerInputComponent);

	PlayerInputComponent->BindAxis("Turn", this, &APawn::AddControllerYawInput);
	PlayerInputComponent->BindAxis("LookUp", this, &APawn::AddControllerPitchInput);

	PlayerInputComponent->BindAction("Jump", IE_Pressed, this, &ACharacter::Jump);
	PlayerInputComponent->BindAction("Jump", IE_Released, this, &ACharacter::StopJumping);

	PlayerInputComponent->BindAxis("MoveForward", this, &ABatteryMan::MoveForward);
	PlayerInputComponent->BindAxis("MoveRight", this, &ABatteryMan::MoveRight);

	PlayerInputComponent->BindAction("ZoomCamera", IE_Pressed, this, &ABatteryMan::CameraZoom);
	PlayerInputComponent->BindAction("ZoomCamera", IE_Released, this, &ABatteryMan::CameraChangeBack);
	PlayerInputComponent->BindAction("Shoot", IE_Pressed, this, &ABatteryMan::CheckEquippedGun);
	PlayerInputComponent->BindAction("Shoot", IE_Released, this, &ABatteryMan::StopShooting);
	PlayerInputComponent->BindAction("Reload", IE_Pressed, this, &ABatteryMan::ReloadTimer);
	PlayerInputComponent->BindAction("SwapGun", IE_Pressed, this, &ABatteryMan::SwapGun);

}


void ABatteryMan::MoveForward(float Axis)
{
	if (!bDead)
	{
		// getting rotations to find out forward facing direction
		const FRotator Rotation = Controller->GetControlRotation();
		const FRotator YawRotation(0, Rotation.Yaw, 0);
		const FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);

		AddMovementInput(Direction, Axis);
	}
}

void ABatteryMan::MoveRight(float Axis)
{
	if (!bDead)
	{
		// getting rotations to find out forward facing direction
		const FRotator Rotation = Controller->GetControlRotation();
		const FRotator YawRotation(0, Rotation.Yaw, 0);
		const FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::Y);

		AddMovementInput(Direction, Axis);
	}
}



void ABatteryMan::CameraZoom()
{
	GetCharacterMovement()->bUseControllerDesiredRotation = true;
	GetCharacterMovement()->bOrientRotationToMovement = false;
	bUseControllerRotationPitch = true;
	CameraBoom->TargetArmLength = 100.0f;
	CameraBoom->SocketOffset.Y = 30.0f;
	CameraZoomed = true;
}

void ABatteryMan::CameraChangeBack()
{
	GetCharacterMovement()->bUseControllerDesiredRotation = false;
	GetCharacterMovement()->bOrientRotationToMovement = true;
	bUseControllerRotationPitch = false;
	CameraBoom->TargetArmLength = 300.0f;
	CameraBoom->SocketOffset.Y = 0.0f;
	CameraZoomed = false;

	FOutputDeviceNull OutputDeviceNull;
	const TCHAR* CmdAndParams = TEXT("SetPlayerY");
	this->CallFunctionByNameWithArguments(CmdAndParams, OutputDeviceNull, nullptr, true);
}

void ABatteryMan::ShootTimer()
{
	CanShoot = true;
}

void ABatteryMan::StopShooting()
{
	ShootKeyHeldDown = false;
}

void ABatteryMan::ReloadTimer()
{
	if (IsReloading == false && Ammo < MaxClip && AmmoReserve > 0)
	{
		IsReloading = true;
		if (GunReload != NULL)
		{
			UGameplayStatics::PlaySoundAtLocation(GetWorld(), GunReload, GetActorLocation(), 1.0f, 1.0f, 0.0f);
		}
		GetWorld()->GetTimerManager().SetTimer(InputTimeHandle, this, &ABatteryMan::Reloading, 2.0f, false, 1.0f);
	}
}

void ABatteryMan::Reloading()
{
	/** Calculates how much ammo can be added considering the AmmoReserve amount and the MaxClip value */
	int ReloadAmount = MaxClip - Ammo;
	ReloadAmount = (AmmoReserve - ReloadAmount) >= 0 ? ReloadAmount : AmmoReserve;
	Ammo += ReloadAmount;
	AmmoReserve -= ReloadAmount;
	IsReloading = false;
	CanShoot = true;
}

void ABatteryMan::CheckEquippedGun()
{
	/** Checks which gun is equipped before firing, as they both function differently */
	if (GunEquipped == 1)
	{
		ShootKeyHeldDown = true;
	}

	if (GunEquipped == 2)
	{
		Shoot(1.0f);
	}
}

void ABatteryMan::SwapGun()
{
	if (GunEquipped == 1)
	{
		GunEquipped = 2;
	}

	else if (GunEquipped == 2)
	{
		GunEquipped = 1;
	}

	if (GunSwitchSound != NULL)
	{
		UGameplayStatics::PlaySoundAtLocation(GetWorld(), GunSwitchSound, GetActorLocation(), 1.0f, 1.0f, 0.0f);
	}
}

void ABatteryMan::MakeHitMarkerFalse()
{
	HitMarker = false;
}

void ABatteryMan::Shoot(float Timer)
{
	if (Ammo > 0 && CanShoot == true && IsReloading == false && CameraZoomed == true)
	{ 
		/** Contains info on what the raycast hits */
		FHitResult OutHit;
		if (GunShot != NULL)
		{
			UGameplayStatics::PlaySoundAtLocation(GetWorld(), GunShot, GetActorLocation(), 1.0f, 1.0f, 0.0f);
		}

		FVector Start = FollowCamera->GetComponentLocation();
		FVector ForwardVector = FollowCamera->GetForwardVector();
	
		Start = Start + (ForwardVector * CameraBoom->TargetArmLength);

		FVector End = Start + (ForwardVector * 5000.f);

		/** Makes the raycast ignore the player */
		FCollisionQueryParams CollisionParams;
		CollisionParams.AddIgnoredActor(this->GetOwner());

		/** Timer for when the player can next shoot again */
		GetWorld()->GetTimerManager().SetTimer(InputTimeHandle, this, &ABatteryMan::ShootTimer, 0.1f, true, Timer);

		/** Checks to see what has been hit */
		bool IsHit = GetWorld()->LineTraceSingleByChannel(OutHit, Start, End, ECC_Visibility, CollisionParams);
		if (IsHit)
		{
			/** If enemy has been hit call a function decreasing their health */
			if (OutHit.GetActor()->ActorHasTag("Enemy"))
			{
				FOutputDeviceNull OutputDeviceNull;
				const TCHAR* CmdAndParams = TEXT("DecreaseHealth");
				OutHit.GetActor()->CallFunctionByNameWithArguments(CmdAndParams, OutputDeviceNull, nullptr, true);
				HitMarker = true;
				
			}
		}

		Ammo -= 1;
		CanShoot = false;
	}
}



UFUNCTION() void ABatteryMan::OnBeginOverlap(UPrimitiveComponent* HitComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult)
{
	/** If player collides with a recharge pickup add to their health and ammo */
	if (OtherActor->ActorHasTag("Recharge"))
	{
		Power += 10.0f;
		AmmoReserve += 5;
		if (Power > 100.0f)
		{
			Power = 100.0f;
		}

		OtherActor->Destroy();
	}

	/** If player collides with the enemy take away from their health */
	if (OtherActor->ActorHasTag("Enemy"))
	{
		Power -= 20;
		if (ZombieAttack != NULL)
		{
			UGameplayStatics::PlaySoundAtLocation(GetWorld(), ZombieAttack, GetActorLocation(), 1.0f, 1.0f, 0.0f);
		}
		HitScreen = true;
	}
}

void ABatteryMan::RestartGame()
{
	/** Restarts game */
	UGameplayStatics::OpenLevel(this, FName("MainMenuMap"), false);
}

