// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Character.h"
#include "Camera/CameraComponent.h"
#include "Components/CapsuleComponent.h"
#include "Components/StaticMeshComponent.h"
#include "Components/InputComponent.h"
#include "GameFramework/CharacterMovementComponent.h"
#include "GameFramework/Controller.h"
#include "GameFramework/SpringArmComponent.h"

#include "Blueprint/UserWidget.h"
#include "BatteryMan.generated.h"

UCLASS()
class UNREALTUTORIAL_API ABatteryMan : public ACharacter
{
	GENERATED_BODY()

public:
	// Sets default values for this character's properties
	ABatteryMan();

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Camera) USpringArmComponent* CameraBoom;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Camera) UCameraComponent* FollowCamera;

	void MoveForward(float Axis);
	void MoveRight(float Axis);

	/** Functions used for zooming in and out the camera when the user holds right mouse */
	void CameraZoom();
	void CameraChangeBack();

	/** Function to use a raycast when the player shoots */
	void Shoot(float Timer);

	/** Function called when the shoot timer is made to true (Timer in between single shots as a cooldown) */
	void ShootTimer();

	/** Function that begins a timer for reloading, when the timer is over the Reloading function is called */
	void ReloadTimer();

	/** Function that reloads the players gun */
	void Reloading();

	/** Function for when the player stops holding down shoot, stopping the Shoot function being called in tick */
	void StopShooting();

	/** Function used to check which of the two gun modes is equipped (single or full auto fire) */
	void CheckEquippedGun();

	/** Function used to swap the gun between the two modes (single or full auto fire) */
	void SwapGun();
	
	/** Function used to make the hit marker false after flashing it upon hitting an enemy */
	void MakeHitMarkerFalse();

	/** Function used to restart the game upon the player dying */
	void RestartGame();

	float HitMarkerTimePassed;

	float HitScreenTimer;

	/** Bool to check if the player is reloading, used to stop the player shooting while reloading */
	bool IsReloading;

	int MaxClip = 15;

	bool HasSpawned;

	int CurrentScore;

	bool IsZoomed = false;

	UPROPERTY(EditAnywhere) TSubclassOf<APawn> PlayerRecharge;

	FTimerHandle InputTimeHandle;

	// If player is dead, is used for checking if player can mvoe or not 
	bool bDead;

	/** Players health */
	UPROPERTY(VisibleAnywhere, BlueprintReadOnly) float Power;

	/** Score displayed in top right, increases upon killing enemies */
	UPROPERTY(EditAnywhere, BlueprintReadWrite) int Score;

	/** Players main ammo */
	UPROPERTY(EditAnywhere, BlueprintReadWrite) int Ammo;

	/** Player reserve ammo, added to Ammo when reloading */
	UPROPERTY(EditAnywhere, BlueprintReadWrite) int AmmoReserve;

	/** OtherComp being being the component you collide with */
	UFUNCTION() void OnBeginOverlap(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult);

	UPROPERTY(EditAnywhere, Category = "UI HUD") TSubclassOf<UUserWidget> Player_Power_Widget_Class;

	UUserWidget* Player_Power_Widget;

	/** Images used for both gun modes */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "RifleImage") UTexture* GunRifle;
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "GunImage") UTexture* GunPistol;

	/** Animation used for the main player */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "DefaultAnimation") UAnimationAsset* DefaultAnimation;

	/** Integer used to tell which gun mode is equipped */
	UPROPERTY(EditAnywhere, BlueprintReadWrite) int GunEquipped;

	/** Bool used to tell if the player is holding down shoot with full auto mode on the gun, if true shoots continuously through tick function */
	UPROPERTY(EditAnywhere, BlueprintReadWrite) bool ShootKeyHeldDown;

	/** Bool to check if player can shoot e.g. made false while reloading */
	UPROPERTY(EditAnywhere, BlueprintReadWrite) bool CanShoot = true;

	/** Bool to check if the cameras zoomed, used to check if the crosshair should be visible or not */
	UPROPERTY(EditAnywhere, BlueprintReadWrite) bool CameraZoomed;

	/** If the players shot hits an enemy, flash a larger hit marker as visual feedback */
	UPROPERTY(EditAnywhere, BlueprintReadWrite) bool HitMarker;

	/** If the player gets hit a red hit screen flashes, depending on if HitScreen is true or false */
	UPROPERTY(EditAnywhere, BlueprintReadWrite) bool HitScreen;

	/** Various sound effects */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "GunSound") USoundBase* GunShot;
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "GunSound") USoundBase* GunReload;
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "ZombieSound") USoundBase* ZombieAttack;
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "GunSound") USoundBase* GunSwitchSound;



protected:
	// Called when the game starts or when spawned
	virtual void BeginPlay() override;




public:	
	// Called every frame
	virtual void Tick(float DeltaTime) override;

	// Called to bind functionality to input
	virtual void SetupPlayerInputComponent(class UInputComponent* PlayerInputComponent) override;

};
